Exo bibliothèque / Création de classe
Classes crées dans un dossier models
 
export class Book {
  //attributs qu'on veut conserver
  //private : élément accessible seulement dans l'objet
  private _id: number;
  private _title: string;
  private _description: string;
  private _author: string;
  private _available: boolean;

 constructor(
    id: number,
    title: string,
    description: string,
    author: string,
    available: boolean
  ) {
    //attributs qu'on veut conserver
    //private : élément accessible seulement dans l'objet
    this._id = id;
    this._title = title;
    this._description = description;
    this._author = author;
    this._available = available;
  }

Ctrl+shift+p generate all getter and setters
/**
   * Getter id
   * @return {number}
   */
  get id(): number {
    return this._id;
  }

  /**
   * Setter id
   * @param {number} value
   */
  set id(value: number) {
    this._id = value;
  }

  /**
   * Getter title
   * @return {string}
   */
  get title(): string {
    return this._title;
  }

  /**
   * Getter description
   * @return {string}
   */
  get description(): string {
    return this._description;
  }

  /**
   * Getter author
   * @return {string}
   */
  get author(): string {
    return this._author;
  }

  /**
   * Getter available
   * @return {boolean}
   */
  get available(): boolean {
    return this._available;
  }

  /**
   * Setter title
   * @param {string} value
   */
  set title(value: string) {
    this._title = value;
  }

  /**
   * Setter description
   * @param {string} value
   */
  set description(value: string) {
    this._description = value;
  }

  /**
   * Setter author
   * @param {string} value
   */
  set author(value: string) {
    this._author = value;
  }

  /**
   * Setter available
   * @param {boolean} value
   */
  set available(value: boolean) {
    this._available = value;
  }

Création de service
// Book.service.ts
import { Injectable } from '@angular/core';
import { Book } from 'src/app/models/Book';

@Injectable({
  providedIn: 'root',
})
export class BookService {
  books: Book[];

// app module .ts
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { BookService } from './services/book/book.service';
import { BooksListComponent } from './views/books-list/books-list.component';

@NgModule({
  declarations: [AppComponent, BooksListComponent],
  imports: [BrowserModule, AppRoutingModule],
  providers: [BookService], //Importer le bookservice
  bootstrap: [AppComponent],
})
export class AppModule {}

Création d’un component books-list
// books list ts
import { Component, OnInit } from '@angular/core';
import { Book } from 'src/app/models/Book';
import { BookService } from 'src/app/services/book/book.service';

@Component({
  selector: 'app-books-list',
  templateUrl: './books-list.component.html',
  styleUrls: ['./books-list.component.css'],
})
export class BooksListComponent implements OnInit {
  books!: Book[]; //! permet d'overrider a la compilation pour instancier + tard (dans le ngOnInit)

  constructor(private bookService: BookService) {}

  ngOnInit(): void {
    this.books = this.bookService.books;
  }
}


<!-- books-list html -->
<div class="container mt-5">
  <h1 class="text-center my-4">Books Manager</h1>
  <table class="table">
    <thead class="table-dark">
      <tr>
        <th scope="col">ID</th>
        <th scope="col">Title</th>
        <th scope="col">Author</th>
        <th scope="col">Available</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let book of books">
        <th scope="row">{{ book.id }}</th>
        <td>{{ book.title }}</td>
        <td>{{ book.author }}</td>
        <td>{{ book.available ? "Dispo" : "Pas dispo" }}</td>
      </tr>
    </tbody>
  </table>
</div>

